{
	"info": {
		"name": "dimensional-data-controller",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /data/svap- 200 response for valid API Key header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid api key header should return 200 status for SVAP\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "{{apiKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/svap",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"svap"
					]
				},
				"description": "Valid api key header should return 200 status for SVAP"
			},
			"response": []
		},
		{
			"name": "GET/data/svap - test for correct schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"results\": [\r",
							"    {\r",
							"      \"criterion\": {\r",
							"        \"certificationEdition\": \"string\",\r",
							"        \"certificationEditionId\": 0,\r",
							"        \"description\": \"string\",\r",
							"        \"id\": 0,\r",
							"        \"number\": \"string\",\r",
							"        \"removed\": false,\r",
							"        \"title\": \"string\"\r",
							"      },\r",
							"      \"id\": 0,\r",
							"      \"svap\": {\r",
							"        \"approvedStandardVersion\": \"string\",\r",
							"        \"regulatoryTextCitation\": \"string\",\r",
							"        \"svapId\": 0\r",
							"      }\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Validate that svap end point has correct schema\", () => {\r",
							"            pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "{{apiKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/svap",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"svap"
					]
				},
				"description": "Validate that svap response has correct schema"
			},
			"response": []
		},
		{
			"name": "GET /data/svap - Invalid API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid api key header should return 401 status for SVAP\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "atest123cg",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/svap",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"svap"
					]
				},
				"description": "Invalid api key header should return 401 status for SVAP"
			},
			"response": []
		},
		{
			"name": "GET /data/svap - without API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Requests without API Key should return 400 status for SVAP\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/svap",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"svap"
					]
				},
				"description": "Requests without API Key should return 400 status for SVAP"
			},
			"response": []
		},
		{
			"name": "GET /data/measures - removed measures validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"expect removed g1g2 measure to be marked as removed\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    const measure = jsonData.data.find(item => item.requiredTest === \"Required Test 9: Stage 2 Objective 7\");\r",
							"    pm.expect(measure.removed).to.be.true;\r",
							"    pm.expect(measure.abbreviation).to.eql(\"RT9\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "{{apiKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/measures",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"measures"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /requirement-types - return 200 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"pm.test(\"requirement-types endpoint should return 200 status and response body should not be empty\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonResponse.response).not.eq(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "{{apiKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/requirement-types",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"requirement-types"
					]
				},
				"description": "surveillance-requirement-detail-types endpoint should return 200 status and response body should not be empty"
			},
			"response": []
		},
		{
			"name": "GET /nonconformity-types/v2 - return status 200 ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"pm.test(\"nonconformity-types/v2 endpoint should return 200 status and response body should not be empty\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonResponse.response).not.eq(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "{{apiKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/nonconformity-types/v2",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"nonconformity-types",
						"v2"
					]
				},
				"description": "nonconformity-types/v2 endpoint should return 200 status and response body should not be empty"
			},
			"response": []
		},
		{
			"name": "GET /requirement-group-types - returns 200 status and response is not null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"pm.test(\"requirement-group-types endpoint should return 200 status and response body should not be empty\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonResponse.response).not.eq(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "API-Key",
						"value": "{{apiKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/rest/data/requirement-group-types",
					"host": [
						"{{url}}"
					],
					"path": [
						"rest",
						"data",
						"requirement-group-types"
					]
				}
			},
			"response": []
		}
	]
}